-- automatically generated by BNF Converter
module RunInstant where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )

import LexInstant
import ParInstant
import SkelInstant
import PrintInstant
import AbsInstant
import Jvm as J
import Llvm as L

import Control.Monad.IO.Class

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int



putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()


run :: String -> String -> Verbosity -> ParseFun Program -> String -> IO ()
run f mode v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok  tree -> do --putStrLn "\nParse Successful!"
                          --showTree v tree
                          readFile f
                          case (mode) of
                              "jvm" -> do
                                  J.startProgram f tree
                                  return ()
                              "llvm" -> do
                                  L.startProgram f tree
                                  return ()
                              otherwise -> return ()




showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree
